const minMalwareSpread = (graph: number[][], initial: number[]): number => {
    const n = graph.length;
    const dfs = (node: number, visited: Set<number>): void => {
        visited.add(node);
        for(let neighbor = 0; neighbor < n; neighbor++){
            if(graph[node][neighbor] === 1 && !visited.has(neighbor)){
                dfs(neighbor, visited);
            }
        }
    };
    const getInfectedCount = (excluding: number): number => {
        const visited = new Set<number>();
        const initialSet = new Set(initial);
        initialSet.delete(excluding);
        for(const node of initialSet){
            if(!visited.has(node)){
                dfs(node, visited);
            }
        }
        return visited.size;
    };
    let minInfected = Infinity;
    let resultNode = -1;
    for(const node of initial){
        const infectedCount = getInfectedCount(node);
        if(infectedCount < minInfected || (infectedCount === minInfected && node < resultNode)){
            minInfected = infectedCount;
            resultNode = node;
        }
    }
    return resultNode;
};